// Mocks generated by Mockito 5.4.6 from annotations
// in book_finder_assignment_aayush/test/mocks/mock_use_cases.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:book_finder_assignment_aayush/features/books/domain/entities/book.dart'
    as _i5;
import 'package:book_finder_assignment_aayush/features/books/domain/repositories/book_repository.dart'
    as _i2;
import 'package:book_finder_assignment_aayush/features/books/domain/usecases/get_book_details.dart'
    as _i6;
import 'package:book_finder_assignment_aayush/features/books/domain/usecases/get_saved_book_details.dart'
    as _i7;
import 'package:book_finder_assignment_aayush/features/books/domain/usecases/get_saved_books.dart'
    as _i10;
import 'package:book_finder_assignment_aayush/features/books/domain/usecases/save_book.dart'
    as _i8;
import 'package:book_finder_assignment_aayush/features/books/domain/usecases/search_books.dart'
    as _i3;
import 'package:book_finder_assignment_aayush/features/books/domain/usecases/unsave_book.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBookRepository_0 extends _i1.SmartFake
    implements _i2.BookRepository {
  _FakeBookRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SearchBooks].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchBooks extends _i1.Mock implements _i3.SearchBooks {
  MockSearchBooks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookRepository get bookRepository =>
      (super.noSuchMethod(
            Invocation.getter(#bookRepository),
            returnValue: _FakeBookRepository_0(
              this,
              Invocation.getter(#bookRepository),
            ),
          )
          as _i2.BookRepository);

  @override
  _i4.Future<List<_i5.Book>> call(_i3.SearchParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<List<_i5.Book>>.value(<_i5.Book>[]),
          )
          as _i4.Future<List<_i5.Book>>);
}

/// A class which mocks [GetBookDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBookDetails extends _i1.Mock implements _i6.GetBookDetails {
  MockGetBookDetails() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookRepository get bookRepository =>
      (super.noSuchMethod(
            Invocation.getter(#bookRepository),
            returnValue: _FakeBookRepository_0(
              this,
              Invocation.getter(#bookRepository),
            ),
          )
          as _i2.BookRepository);

  @override
  _i4.Future<_i5.Book?> call(String? bookId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [bookId]),
            returnValue: _i4.Future<_i5.Book?>.value(),
          )
          as _i4.Future<_i5.Book?>);
}

/// A class which mocks [GetSavedBookDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSavedBookDetails extends _i1.Mock
    implements _i7.GetSavedBookDetails {
  MockGetSavedBookDetails() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookRepository get bookRepository =>
      (super.noSuchMethod(
            Invocation.getter(#bookRepository),
            returnValue: _FakeBookRepository_0(
              this,
              Invocation.getter(#bookRepository),
            ),
          )
          as _i2.BookRepository);

  @override
  _i4.Future<_i5.Book?> call(String? bookId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [bookId]),
            returnValue: _i4.Future<_i5.Book?>.value(),
          )
          as _i4.Future<_i5.Book?>);
}

/// A class which mocks [SaveBook].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveBook extends _i1.Mock implements _i8.SaveBook {
  MockSaveBook() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookRepository get bookRepository =>
      (super.noSuchMethod(
            Invocation.getter(#bookRepository),
            returnValue: _FakeBookRepository_0(
              this,
              Invocation.getter(#bookRepository),
            ),
          )
          as _i2.BookRepository);

  @override
  _i4.Future<bool> call(_i5.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#call, [book]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [RemoveBook].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveBook extends _i1.Mock implements _i9.RemoveBook {
  MockRemoveBook() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookRepository get bookRepository =>
      (super.noSuchMethod(
            Invocation.getter(#bookRepository),
            returnValue: _FakeBookRepository_0(
              this,
              Invocation.getter(#bookRepository),
            ),
          )
          as _i2.BookRepository);

  @override
  _i4.Future<bool> call(String? bookId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [bookId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [GetSavedBooks].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSavedBooks extends _i1.Mock implements _i10.GetSavedBooks {
  MockGetSavedBooks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookRepository get bookRepository =>
      (super.noSuchMethod(
            Invocation.getter(#bookRepository),
            returnValue: _FakeBookRepository_0(
              this,
              Invocation.getter(#bookRepository),
            ),
          )
          as _i2.BookRepository);

  @override
  _i4.Future<List<_i5.Book>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.Book>>.value(<_i5.Book>[]),
          )
          as _i4.Future<List<_i5.Book>>);
}
